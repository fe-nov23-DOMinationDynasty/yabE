// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Comment {
  id               String         @id @default(uuid())
  description      String
  title            String
  userId           String         @map("user_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  rating           Int
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  productDetails   ProductDetails @relation(fields: [productDetailsId], references: [id], onDelete: Cascade)
  productDetailsId String         @map("product_details_id")

  @@map("comment")
}

model Location {
  id             String          @id @default(uuid())
  name           String
  city           String
  country        String
  description    String
  latitude       Float
  longitude      Float
  productDetails ProductDetails?

  @@map("location")
}

model ProductDetails {
  id             String           @id @default(uuid())
  description    String
  images         String[]
  locationId     String           @unique @map("location_id")
  location       Location         @relation(fields: [locationId], references: [id], onDelete: Cascade)
  userId         String           @map("user_id")
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating         Int
  paymentMethods PaymentMethods[] @map("payment_methods")
  commentIds     String[]         @map("comment_ids")
  comments       Comment[]
  product        Product?

  @@map("product_detail")
}

model Product {
  id               String         @id @default(uuid())
  title            String
  price            Float
  currency         String
  userId           String         @map("user_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  productDetailsId String         @unique @map("product_details_id")
  productDetails   ProductDetails @relation(fields: [productDetailsId], references: [id], onDelete: Cascade)
  quantity         Int

  @@map("product")
}

model User {
  id             String           @id @default(uuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  commentIds     Int[]            @map("comment_ids")
  comments       Comment[]
  productIds     Int[]            @map("product_ids")
  products       Product[]
  rating         Int
  itemsSold      Int              @map("items_sold")
  productDetails ProductDetails[]
  password       String

  @@map("user")
}

enum PaymentMethods {
  CASH
  CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
}
